--- ../../../omf-expctl/ruby/omf-expctl/handlerCommands.rb	2013-02-12 10:42:01.491595483 +0100
+++ ../../../../expctl/omf-expctl-5.4/omf-expctl/handlerCommands.rb	2013-02-11 22:24:05.122794501 +0100
@@ -84,6 +84,56 @@
   def method_missing(name, *args, &block) return true end
 end
 
+module OMF::EC
+  module NodeSetHelper
+    def selectNodeSet groupName, selector
+      if selector.kind_of?(ExperimentProperty)
+        selector = selector.value
+      end
+
+      if (selector != nil)
+        # What kind of selector do we have?
+        if selector.kind_of?(String)
+          begin
+            # Selector is the name of an existing Topology (e.g. "myTopo")
+            topo = Topology[selector]
+            ns = BasicNodeSet.new(groupName, topo)
+    	# This raises an exception if Selector does not refer to an existing
+            # Topology
+          rescue
+            # Selector is a comma-separated list of existing resources
+            # These resources are identified by their HRNs
+            # e.g. "node1, node2, node3"
+            tname = "-:topo:#{groupName}"
+            topo = Topology.create(tname, selector.split(","))
+            ns = BasicNodeSet.new(groupName, topo)
+          end
+        # Selector is an Array of String
+        elsif selector.kind_of?(Array) && selector[0].kind_of?(String)
+          begin
+            # Selector is an array of group names
+            # Thus we are creating a Group or Groups
+            ns = GroupNodeSet.new(groupName, selector)
+            # This raises an exception if Selector contains a name, which does
+            # not refer to an existing defined Group
+          rescue
+            # Selector is an array of resource names, which are identified by their
+            # HRNs, e.g. ['node1','node2','node3']
+            tname = "-:topo:#{groupName}"
+            topo = Topology.create(tname, selector)
+            ns = BasicNodeSet.new(groupName, topo)
+          end
+        else
+          raise "Unknown node set declaration '#{selector}: #{selector.class}'"
+        end
+      else
+        ns = BasicNodeSet.new(groupName)
+      end
+      
+      ns
+    end
+  end
+end
 
 module OMF::EC
   module Commands
@@ -182,49 +232,8 @@
         raise "Node set '#{groupName}' already defined. Choose different name."
       end
 
-      if selector.kind_of?(ExperimentProperty)
-        selector = selector.value
-      end
-
-      if (selector != nil)
-        # What kind of selector do we have?
-        if selector.kind_of?(String)
-          begin
-            # Selector is the name of an existing Topology (e.g. "myTopo")
-            topo = Topology[selector]
-            ns = BasicNodeSet.new(groupName, topo)
-    	# This raises an exception if Selector does not refer to an existing
-            # Topology
-          rescue
-            # Selector is a comma-separated list of existing resources
-            # These resources are identified by their HRNs
-            # e.g. "node1, node2, node3"
-            tname = "-:topo:#{groupName}"
-            topo = Topology.create(tname, selector.split(","))
-            ns = BasicNodeSet.new(groupName, topo)
-          end
-        # Selector is an Array of String
-        elsif selector.kind_of?(Array) && selector[0].kind_of?(String)
-          begin
-            # Selector is an array of group names
-            # Thus we are creating a Group or Groups
-            ns = GroupNodeSet.new(groupName, selector)
-            # This raises an exception if Selector contains a name, which does
-            # not refer to an existing defined Group
-          rescue
-            # Selector is an array of resource names, which are identified by their
-            # HRNs, e.g. ['node1','node2','node3']
-            tname = "-:topo:#{groupName}"
-            topo = Topology.create(tname, selector)
-            ns = BasicNodeSet.new(groupName, topo)
-          end
-        else
-          raise "Unknown node set declaration '#{selector}: #{selector.class}'"
-        end
-      else
-        ns = BasicNodeSet.new(groupName)
-      end
-
+      ns = selectNodeSet groupName, selector
+	
       return RootNodeSetPath.new(ns, nil, nil, block)
     end
 
