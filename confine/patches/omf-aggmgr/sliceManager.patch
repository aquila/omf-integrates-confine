--- ../../../omf-aggmgr/ruby/omf-aggmgr/ogs_sliceManager/sliceManager.rb	2013-02-12 09:13:50.017378250 +0100
+++ ../../../../aggmgr/omf-aggmgr-5.4/omf-aggmgr/ogs_sliceManager/sliceManager.rb	2013-02-11 22:22:44.264792867 +0100
@@ -44,7 +44,7 @@
 ROOT = "OMF_#{OMF::Common::MM_VERSION()}"
 
 DataMapper::Logger.new($stdout, :debug)
-DataMapper.setup(:default, 'mysql://localhost/dmtest')
+DataMapper.setup(:default, 'mysql://openfire:openfire@localhost/openfire')
 
 class Slice
   include DataMapper::Resource
@@ -68,6 +68,35 @@
   description 'Create slices and associate resources to them.'
   @@config = nil
 
+  def self.testingFunction(sliceName, resources, pubsub_domain)
+	puts "TEESTING TESTING TESTING TESTING TESTING TESTING"
+	# For each resource, create /OMF_x.x/<sliceName>/resources/<hrn>,
+    # where <hrn> is the human readable name of the resource.
+    MObject.debug "associateResourcesToSlice"
+    if pubsub_domain.nil?
+      MObject.debug("SliceManager", "parameter pubsub_domain is empty")
+    end
+    if sliceName.nil?
+      MObject.debug("SliceManager", "parameter sliceName is empty")
+      return false
+    end
+    slice = Slice.first(:name => sliceName);
+    if slice.nil? then
+      MObject.debug("SliceManager","Slice not found #{sliceName}")
+      "Slice not found #{sliceName}"
+    else
+      domain = self.getPubSubDomain(pubsub_domain)
+      resource_list = resources.split(',')
+      resource_list.each do |resource|
+        MObject.debug("SliceManager", "Associate #{resource} --> #{sliceName}")
+        self.create_pubsub_node(domain, self.resource_node(sliceName, resource))
+        Resource.create(:hrn => resource,
+                        :slice => slice)
+      end
+      true
+    end
+  end
+
   #
   # Create a new slice.
   #
@@ -118,6 +147,34 @@
     # For each resource, create /OMF_x.x/<sliceName>/resources/<hrn>,
     # where <hrn> is the human readable name of the resource.
     MObject.debug "associateResourcesToSlice"
+    if pubsub_domain.nil?
+      MObject.debug("SliceManager", "parameter pubsub_domain is empty")
+    end
+    if sliceName.nil?
+      MObject.debug("SliceManager", "parameter sliceName is empty")
+      return false
+    end
+    slice = Slice.first(:name => sliceName);
+    if slice.nil? then
+      MObject.debug("SliceManager","Slice not found #{sliceName}")
+      "Slice not found #{sliceName}"
+    else
+      domain = self.getPubSubDomain(pubsub_domain)
+      resource_list = resources.split(',')
+      resource_list.each do |resource|
+        MObject.debug("SliceManager", "Associate #{resource} --> #{sliceName}")
+        self.create_pubsub_node(domain, self.resource_node(sliceName, resource))
+        Resource.create(:hrn => resource,
+                        :slice => slice)
+      end
+      true
+    end
+  end
+
+  def self.allocateResourcesToSliceCONFINE(sliceName, resources, pubsub_domain)
+    # For each resource, create /OMF_x.x/<sliceName>/resources/<hrn>,
+    # where <hrn> is the human readable name of the resource.
+    MObject.debug "associateResourcesToSlice"
     if pubsub_domain.nil?
       MObject.debug("SliceManager", "parameter pubsub_domain is empty")
     end
