module Confine
	class OMFPortal


	 	# Do generic database stuff
  		def self.doDB
        		begin
                		# Query the inventory
                		conf = getTestbedConfig(nil, @@config)
                		inv = InventoryService.getInv(conf)
                		yield(inv)
        		rescue Exception => ex
                		error "Inventory - Error connecting to the Inventory Database - '#{ex}''"
                		raise HTTPStatus::InternalServerError
        		end
 		end

		def self.getTestbedId(name)
		 	doDB do |inv|
                                inv.getTestbedId(location[:testbedname])
                        end
		end
		
		# Make up the location for the database
  		# Use the information provided by the CONFINE portal
  		def self.makeDBLocation(location)
        		dbLocation = Hash.new
        		# Fill in that received from CONFINE Portal
        		dbLocation['name'] = location[:name]
        		dbLocation['x'] = location[:x]
        		dbLocation['y'] = location[:y]
        		dbLocation['z'] = location[:z]
        		dbLocation['testbed_id'] = getTestbedId

        		dbLocation
		end

		# Make up the node for the database
  		# Use the information provided by the CONFINE portal
  		def self.makeDBNode(sliver)
		        node = Hash.new

        		# Fill in that received from CONFINE Portal
        		node['control_ip'] = sliver[:node][:control_ip]
        		node['control_mac'] = sliver[:node][:control_mac]
    			node['hostname'] = sliver[:node][:hostname]
		        node['hrn'] = sliver[:node][:hrn]

        		# Fill in the db id of the location of this node added in the db
        		doDB do |inv|
                		id = inv.getLocationId(sliver[:location][:name],
                                sliver[:location][:x],
                                sliver[:location][:y],
                                sliver[:location][:z])
                		node['location_id'] = id
        		end
        		node
		end

	end
end
